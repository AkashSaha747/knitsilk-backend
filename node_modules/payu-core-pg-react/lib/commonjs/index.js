"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _request = _interopRequireDefault(require("./utils/request"));
var _response = _interopRequireDefault(require("./utils/response"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const _PayUSdk = require('react-native').NativeModules.PayUSdk;
class PayUSdk {
  constructor() {}
  makePayment(params, successBlock, errorBlock) {
    _request.default.SetRequestData(params);
    _request.default.ParseEsentials();
    params = _request.default.GetRequestData();
    _PayUSdk.makePayment(params, successBlock, errorBlock);
  }

  /*
   */
  async createPaymentRequest(params) {
    _request.default.SetRequestData(params);
    _request.default.ParseEsentials();
    params = _request.default.GetRequestData();
    return await _PayUSdk.createPaymentRequest(params);
  }

  /*
  userCredentials
  */
  async fetchPaymentOptions(params) {
    _request.default.SetRequestData(params);
    params = _request.default.GetRequestData();
    const response = await _PayUSdk.fetchPaymentOptions(params);
    return _response.default.ParsePaymentOptions(response);
  }

  /*
   */
  async vas(params) {
    _request.default.SetRequestData(params);
    params = _request.default.GetRequestData();
    const response = await _PayUSdk.vas(params);
    return _response.default.ParseVAS(response);
  }

  /*
    cardNumber
  */
  async checkIsDomestic(params) {
    _request.default.SetRequestData(params);
    _request.default.ParseCardNumber();
    params = _request.default.GetRequestData();
    const response = await _PayUSdk.checkIsDomestic(params);
    return _response.default.ParseChecoIsDomastic(response);
  }

  /*
    CardNumber
    isSIInfo : boolean in a string 1 or 0
  */
  async getBinInfo(params) {
    _request.default.SetRequestData(params);
    _request.default.ParseBinInfo();
    params = _request.default.GetRequestData();
    const response = await _PayUSdk.getBinInfo(params);
    return _response.default.ParseBinInfo(response);
  }

  /*
    getConfig
  */
  async getConfig(params) {
    _request.default.SetRequestData(params);
    // requestParser.ParseGetConfig();

    params = _request.default.GetRequestData();
    const response = await _PayUSdk.getConfig(params);
    return _response.default.ParseGetConfig(response);
  }

  /*
    CheckBalance
  */
  async checkBalance(params) {
    _request.default.SetRequestData(params);
    // requestParser.ParseCheckBalance();

    params = _request.default.GetRequestData();
    const response = await _PayUSdk.checkBalance(params);
    return _response.default.ParseCheckBalance(response);
  }

  /*
    EligibleBins for Emi
  */
  async eligibleBinsForEmi(params) {
    _request.default.SetRequestData(params);
    // requestParser.ParseEligibleBinsForEmi();

    params = _request.default.GetRequestData();
    const response = await _PayUSdk.eligibleBinsForEmi(params);
    return _response.default.ParseEligibleBinsForEmi(response);
  }

  /*
    Delete tokenised user card
  */
  async deleteTokenisedCard(params) {
    _request.default.SetRequestData(params);
    // requestParser.ParseDeleteTokenisedUserCard();

    params = _request.default.GetRequestData();
    const response = await _PayUSdk.deleteTokenisedCard(params);
    return _response.default.ParseDeleteTokenisedUserCard(response);
  }

  /*
    Get tokenised user card
  */
  async getTokenisedCard(params) {
    _request.default.SetRequestData(params);
    // requestParser.ParseGetTokenisedCard();

    params = _request.default.GetRequestData();
    const response = await _PayUSdk.getTokenisedCard(params);
    return _response.default.ParseGetTokenisedCard(response);
  }

  /*
    Get tokenised user card details
  */
  async getTokenisedCardDetails(params) {
    _request.default.SetRequestData(params);
    // requestParser.ParseGetTokenisedCardDetails();

    params = _request.default.GetRequestData();
    const response = await _PayUSdk.getTokenisedCardDetails(params);
    return _response.default.ParseGetTokenisedCardDetails(response);
  }

  /*
    Get merchant ibibo codes
  */
  async getIbiboCodes(params) {
    _request.default.SetRequestData(params);
    // requestParser.ParseGetIbiboCodes();

    params = _request.default.GetRequestData();
    const response = await _PayUSdk.getIbiboCodes(params);
    return response;
  }

  /*
    Get merchant ibibo codes
  */
  async fetchIFSCDetails(params) {
    _request.default.SetRequestData(params);
    // requestParser.ParseFetchIFSCDetails();

    params = _request.default.GetRequestData();
    const response = await _PayUSdk.fetchIFSCDetails(params);
    return response;
  }

  /*
    Fetch Offer Details
  */
  async fetchOfferDetails(params) {
    _request.default.SetRequestData(params);
    //requestParser.ParseFetchOfferDetails();

    params = _request.default.GetRequestData();
    const response = await _PayUSdk.fetchOfferDetails(params);
    return response;
  }

  /*
    Validate Offer Details
  */
  async validateOfferDetails(params) {
    _request.default.SetRequestData(params);
    params = _request.default.GetRequestData();
    const response = await _PayUSdk.validateOfferDetails(params);
    return response;
  }

  /*
  Validate Offer Details
  */
  async fetchAdsInformation(params) {
    _request.default.SetRequestData(params);
    //requestParser.ParseFetchAdsInformations();

    params = _request.default.GetRequestData();
    const response = await _PayUSdk.fetchAdsInformation(params);
    return response;
  }

  /*
  Validate Offer Details
  */
  async saveEventImpression(params) {
    _request.default.SetRequestData(params);
    //requestParser.ParseSaveEventImpression();

    params = _request.default.GetRequestData();
    const response = await _PayUSdk.saveEventImpression(params);
    return response;
  }

  /*
    startTime
    endTime
  */
  async getTransactionInfo(params) {
    _request.default.SetRequestData(params);
    _request.default.ParseStartAndEndTime();
    params = _request.default.GetRequestData();
    const response = await _PayUSdk.getTransactionInfo(params);
    return _response.default.ParseTransectionInfo(response);
  }

  /*
    amount
  */
  async getEMIDetails(params) {
    _request.default.SetRequestData(params);
    _request.default.ParseAmount();
    params = _request.default.GetRequestData();
    const response = await _PayUSdk.getEMIDetails(params);
    return _response.default.ParseEmiDetails(response);
  }

  /*
    offerKey
    paymentType
    cardNumber
    ----
    var2
    var3: userCredentials
    var5: string Integer
   */
  async getCheckoutDetails(params) {
    return await _PayUSdk.getCheckoutDetails(params);
  }
  async verifyPayment(params) {
    _request.default.SetRequestData(params);
    _request.default.ParseVerifyPayment();
    params = _request.default.GetRequestData();
    return await _PayUSdk.verifyPayment(params);
  }

  /*
    offerKey
    CardNumber
    amount
    var3: string('cash')
    var4: string('ppintent')
  */
  async getOfferStatus(params) {
    _request.default.SetRequestData(params);
    _request.default.ParseOfferStatus();
    params = _request.default.GetRequestData();
    return await _PayUSdk.getOfferStatus(params);
  }
  async checkOfferDetails(params) {
    _request.default.SetRequestData(params);
    _request.default.ParseCheckoutDetails();
    params = _request.default.GetRequestData();
    return await _PayUSdk.checkOfferDetails(params);
  }
  async getUserCards(params) {
    _request.default.SetRequestData(params);
    _request.default.ParseGetUserCard();
    params = _request.default.GetRequestData();
    return await _PayUSdk.getUserCards(params);
  }
  async saveUserCard(params) {
    _request.default.SetRequestData(params);
    _request.default.ParseSaveUserCard();
    params = _request.default.GetRequestData();
    return await _PayUSdk.saveUserCard(params);
  }
  async editUserCard(params) {
    _request.default.SetRequestData(params);
    _request.default.ParseEditUserCard();
    params = _request.default.GetRequestData();
    return await _PayUSdk.editUserCard(params);
  }
  async deleteStoredCard(params) {
    _request.default.SetRequestData(params);
    _request.default.ParseDeleteUserCard();
    params = _request.default.GetRequestData();
    return await _PayUSdk.deleteStoredCard(params);
  }
  async lookupAPI(params) {
    return await _PayUSdk.lookupAPI(params);
  }
}
var _default = new PayUSdk();
exports.default = _default;
//# sourceMappingURL=index.js.map