const _PayUSdk = require('react-native').NativeModules.PayUSdk;
import requestParser from './utils/request';
import responseParser from './utils/response';
class PayUSdk {
  constructor() {}
  makePayment(params, successBlock, errorBlock) {
    requestParser.SetRequestData(params);
    requestParser.ParseEsentials();
    params = requestParser.GetRequestData();
    _PayUSdk.makePayment(params, successBlock, errorBlock);
  }

  /*
   */
  async createPaymentRequest(params) {
    requestParser.SetRequestData(params);
    requestParser.ParseEsentials();
    params = requestParser.GetRequestData();
    return await _PayUSdk.createPaymentRequest(params);
  }

  /*
  userCredentials
  */
  async fetchPaymentOptions(params) {
    requestParser.SetRequestData(params);
    params = requestParser.GetRequestData();
    const response = await _PayUSdk.fetchPaymentOptions(params);
    return responseParser.ParsePaymentOptions(response);
  }

  /*
   */
  async vas(params) {
    requestParser.SetRequestData(params);
    params = requestParser.GetRequestData();
    const response = await _PayUSdk.vas(params);
    return responseParser.ParseVAS(response);
  }

  /*
    cardNumber
  */
  async checkIsDomestic(params) {
    requestParser.SetRequestData(params);
    requestParser.ParseCardNumber();
    params = requestParser.GetRequestData();
    const response = await _PayUSdk.checkIsDomestic(params);
    return responseParser.ParseChecoIsDomastic(response);
  }

  /*
    CardNumber
    isSIInfo : boolean in a string 1 or 0
  */
  async getBinInfo(params) {
    requestParser.SetRequestData(params);
    requestParser.ParseBinInfo();
    params = requestParser.GetRequestData();
    const response = await _PayUSdk.getBinInfo(params);
    return responseParser.ParseBinInfo(response);
  }

  /*
    getConfig
  */
  async getConfig(params) {
    requestParser.SetRequestData(params);
    // requestParser.ParseGetConfig();

    params = requestParser.GetRequestData();
    const response = await _PayUSdk.getConfig(params);
    return responseParser.ParseGetConfig(response);
  }

  /*
    CheckBalance
  */
  async checkBalance(params) {
    requestParser.SetRequestData(params);
    // requestParser.ParseCheckBalance();

    params = requestParser.GetRequestData();
    const response = await _PayUSdk.checkBalance(params);
    return responseParser.ParseCheckBalance(response);
  }

  /*
    EligibleBins for Emi
  */
  async eligibleBinsForEmi(params) {
    requestParser.SetRequestData(params);
    // requestParser.ParseEligibleBinsForEmi();

    params = requestParser.GetRequestData();
    const response = await _PayUSdk.eligibleBinsForEmi(params);
    return responseParser.ParseEligibleBinsForEmi(response);
  }

  /*
    Delete tokenised user card
  */
  async deleteTokenisedCard(params) {
    requestParser.SetRequestData(params);
    // requestParser.ParseDeleteTokenisedUserCard();

    params = requestParser.GetRequestData();
    const response = await _PayUSdk.deleteTokenisedCard(params);
    return responseParser.ParseDeleteTokenisedUserCard(response);
  }

  /*
    Get tokenised user card
  */
  async getTokenisedCard(params) {
    requestParser.SetRequestData(params);
    // requestParser.ParseGetTokenisedCard();

    params = requestParser.GetRequestData();
    const response = await _PayUSdk.getTokenisedCard(params);
    return responseParser.ParseGetTokenisedCard(response);
  }

  /*
    Get tokenised user card details
  */
  async getTokenisedCardDetails(params) {
    requestParser.SetRequestData(params);
    // requestParser.ParseGetTokenisedCardDetails();

    params = requestParser.GetRequestData();
    const response = await _PayUSdk.getTokenisedCardDetails(params);
    return responseParser.ParseGetTokenisedCardDetails(response);
  }

  /*
    Get merchant ibibo codes
  */
  async getIbiboCodes(params) {
    requestParser.SetRequestData(params);
    // requestParser.ParseGetIbiboCodes();

    params = requestParser.GetRequestData();
    const response = await _PayUSdk.getIbiboCodes(params);
    return response;
  }

  /*
    Get merchant ibibo codes
  */
  async fetchIFSCDetails(params) {
    requestParser.SetRequestData(params);
    // requestParser.ParseFetchIFSCDetails();

    params = requestParser.GetRequestData();
    const response = await _PayUSdk.fetchIFSCDetails(params);
    return response;
  }

  /*
    Fetch Offer Details
  */
  async fetchOfferDetails(params) {
    requestParser.SetRequestData(params);
    //requestParser.ParseFetchOfferDetails();

    params = requestParser.GetRequestData();
    const response = await _PayUSdk.fetchOfferDetails(params);
    return response;
  }

  /*
    Validate Offer Details
  */
  async validateOfferDetails(params) {
    requestParser.SetRequestData(params);
    params = requestParser.GetRequestData();
    const response = await _PayUSdk.validateOfferDetails(params);
    return response;
  }

  /*
  Validate Offer Details
  */
  async fetchAdsInformation(params) {
    requestParser.SetRequestData(params);
    //requestParser.ParseFetchAdsInformations();

    params = requestParser.GetRequestData();
    const response = await _PayUSdk.fetchAdsInformation(params);
    return response;
  }

  /*
  Validate Offer Details
  */
  async saveEventImpression(params) {
    requestParser.SetRequestData(params);
    //requestParser.ParseSaveEventImpression();

    params = requestParser.GetRequestData();
    const response = await _PayUSdk.saveEventImpression(params);
    return response;
  }

  /*
    startTime
    endTime
  */
  async getTransactionInfo(params) {
    requestParser.SetRequestData(params);
    requestParser.ParseStartAndEndTime();
    params = requestParser.GetRequestData();
    const response = await _PayUSdk.getTransactionInfo(params);
    return responseParser.ParseTransectionInfo(response);
  }

  /*
    amount
  */
  async getEMIDetails(params) {
    requestParser.SetRequestData(params);
    requestParser.ParseAmount();
    params = requestParser.GetRequestData();
    const response = await _PayUSdk.getEMIDetails(params);
    return responseParser.ParseEmiDetails(response);
  }

  /*
    offerKey
    paymentType
    cardNumber
    ----
    var2
    var3: userCredentials
    var5: string Integer
   */
  async getCheckoutDetails(params) {
    return await _PayUSdk.getCheckoutDetails(params);
  }
  async verifyPayment(params) {
    requestParser.SetRequestData(params);
    requestParser.ParseVerifyPayment();
    params = requestParser.GetRequestData();
    return await _PayUSdk.verifyPayment(params);
  }

  /*
    offerKey
    CardNumber
    amount
    var3: string('cash')
    var4: string('ppintent')
  */
  async getOfferStatus(params) {
    requestParser.SetRequestData(params);
    requestParser.ParseOfferStatus();
    params = requestParser.GetRequestData();
    return await _PayUSdk.getOfferStatus(params);
  }
  async checkOfferDetails(params) {
    requestParser.SetRequestData(params);
    requestParser.ParseCheckoutDetails();
    params = requestParser.GetRequestData();
    return await _PayUSdk.checkOfferDetails(params);
  }
  async getUserCards(params) {
    requestParser.SetRequestData(params);
    requestParser.ParseGetUserCard();
    params = requestParser.GetRequestData();
    return await _PayUSdk.getUserCards(params);
  }
  async saveUserCard(params) {
    requestParser.SetRequestData(params);
    requestParser.ParseSaveUserCard();
    params = requestParser.GetRequestData();
    return await _PayUSdk.saveUserCard(params);
  }
  async editUserCard(params) {
    requestParser.SetRequestData(params);
    requestParser.ParseEditUserCard();
    params = requestParser.GetRequestData();
    return await _PayUSdk.editUserCard(params);
  }
  async deleteStoredCard(params) {
    requestParser.SetRequestData(params);
    requestParser.ParseDeleteUserCard();
    params = requestParser.GetRequestData();
    return await _PayUSdk.deleteStoredCard(params);
  }
  async lookupAPI(params) {
    return await _PayUSdk.lookupAPI(params);
  }
}
export default new PayUSdk();
//# sourceMappingURL=index.js.map