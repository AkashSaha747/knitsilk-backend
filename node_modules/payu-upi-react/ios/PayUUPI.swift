
import PayULoggerKit
import PayUUPICoreKit

@objc(PayUUPI)
class PayUUPI: RCTEventEmitter {
    let sdkName = "ReactNativeUPI"
    let resourceName = "PayUTPVResource"
    var intentHandler: PayUUPIIntentHandler?
    var collectHandler: PayUUPICollectHandler?
    
    override func supportedEvents() -> [String]! {
        []
    }
    
    override class func requiresMainQueueSetup() -> Bool {
        true
    }
    
    // MARK: - Public Methods -
    @objc(makeUPIPayment:errorCallback:successCallback:)
    func makeUPIPayment(paramDict: NSDictionary,
                        errorCallback: @escaping RCTResponseSenderBlock,
                        successCallback: @escaping RCTResponseSenderBlock) -> Void {
        PayUUPICore.shared.logLevel = .verbose
        initiateUPIPayment(
            paramDict: paramDict,
            errorCallback: errorCallback,
            successCallback: successCallback)
    }
    
    
    @objc(validateVPA:errorCallback:successCallback:)
    func validateVPA(paramDict: NSDictionary,
                     errorCallback:@escaping RCTResponseSenderBlock,
                     successCallback:@escaping RCTResponseSenderBlock) {
        let param = upadateReactSDKVersion(paramDict: paramDict)
        PayUVpaAPIHandler().validateVPA(paramDict: param,
                                        errorCallback: errorCallback,
                                        successCallback: successCallback)
    }
    
    @objc(intentApps:)
    func intentApps(with successCallback:@escaping RCTResponseSenderBlock) {
        intentHandler = PayUUPIIntentHandler()
        intentHandler?.intentApps(with: successCallback)
    }
    
    // MARK: - Private functions -
    
    private func handlePaymentCompletion(errorCallback: @escaping RCTResponseSenderBlock,
                                         successCallback: @escaping RCTResponseSenderBlock) {
        PayUUPICore.shared.paymentCompletion = { [weak self] result in
            guard let self = self else {
                return
            }
            self.collectHandler = nil
            self.intentHandler = nil
            DispatchQueue.main.async {
                let rootVC = RCTPresentedViewController()
                rootVC?.dismiss(animated: true, completion: nil)
                
                switch result {
                case .success(let response):
                    PayULog.verbose(response)
                    if let status = (response["result"] as? [String: Any])?["status"] as? String, status.lowercased() == "success" {
                        successCallback([self.commonResponseFromUPIResponse(response)])
                    } else {
                        errorCallback([self.commonResponseFromUPIResponse(response)])
                    }
                    
                case .failure(let error):
                    PayULog.error(error.description)
                    errorCallback([PayUHybridError.unknown(errorMessage: error.description).errorObj])
                }
            }
        }
    }
    
    private func commonResponseFromUPIResponse(_ response: Dictionary<String, Any>) -> [String: String] {
        return [PayUUPIConstant.payuResponse: PayUHybridUtils.stringResponse(for: response)]
    }
    
    private func initiateUPIPayment(paramDict: NSDictionary,
                                    errorCallback: @escaping RCTResponseSenderBlock,
                                    successCallback: @escaping RCTResponseSenderBlock) {
        handlePaymentCompletion(errorCallback: errorCallback, successCallback: successCallback)
        let param = upadateReactSDKVersion(paramDict: paramDict)
        let paymentParamDict = PayUHybridUtils.paymentParamDictFrom(param: paramDict)
        if let intent_app = PayUHybridUtils.anyValue(paymentParamDict, key: "intent_app"), (((intent_app as? String) != nil)) {
            intentHandler = PayUUPIIntentHandler()
            intentHandler?.initiatePayment(paramDict: param as NSDictionary, errorCallback: errorCallback)
        } else {
            collectHandler = PayUUPICollectHandler()
            collectHandler?.initiatePayment(paramDict: param as NSDictionary, errorCallback: errorCallback)
        }
        
    }
    
    private func upadateReactSDKVersion(paramDict: NSDictionary) -> NSDictionary {
        var param = paramDict as? [String:Any] ?? [:]
        var paymentParamDict = PayUHybridUtils.paymentParamDictFrom(param: paramDict)
        paymentParamDict?[PayUUPIConstant.keys.sdkName] = sdkName
        paymentParamDict?[PayUUPIConstant.keys.resourceName] = resourceName
        param[PayUUPIConstant.keys.payu_payment_params] = paymentParamDict
        return param as NSDictionary
    }
    
}
