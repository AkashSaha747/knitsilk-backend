package com.payuUpi

import com.facebook.react.bridge.*
import com.payu.paymentparamhelper.PayuErrors
import com.payu.upisdk.Upi
import com.payu.upisdk.callbacks.PayUUPICallback
import com.payu.upisdk.parser.ParserValidator
import com.payu.upisdk.util.UpiConstant
import com.payu.upisdk.util.PayUUpiUtil


class PayuUpiModule(var reactContext: ReactApplicationContext) :
  ReactContextBaseJavaModule(reactContext) {

  override fun getName(): String {
    return "PayUUPI" // React Native module name
  }

  @ReactMethod
  fun intentApps(callback: Callback) {
    val packageList = Arguments.createArray()
    val list = PayUUpiUtil.getInstalledUpiAppsList(reactContext)
    for (item in list) {
      val appInfo = Arguments.createMap()
      appInfo.putString(UpiConstant.TITLE, item.getString(UpiConstant.TITLE))
      appInfo.putString(UpiConstant.VALUE, item.getString(UpiConstant.VALUE))
      appInfo.putString(UpiConstant.IMAGE, item.getString(UpiConstant.IMAGE))

      packageList.pushMap( appInfo)
    }
    callback(packageList)
  }


  @ReactMethod
  fun makeUPIPayment(
    payuPaymentParams: ReadableMap,
    errorCallback: Callback,
    successCallback: Callback
  ) {
    try {
      if(!payuPaymentParams.hasKey(UpiConstant.PAYU_PAYMENT_PARAMS)){
        errorCallback("${UpiConstant.MANDATORY_PRAMS_NOT_PASSED}: ${UpiConstant.PAYU_PAYMENT_PARAMS}")
        return
      }
      val map= payuPaymentParams.getMap(UpiConstant.PAYU_PAYMENT_PARAMS)?.toHashMap()
      Upi.getInstance().makePayment(
        PayuUpiCallbackHandler(errorCallback,successCallback)
        ,reactContext.currentActivity
        ,map)
    } catch (e: Exception) {
      errorCallback(UpiConstant.MANDATORY_PRAMS_NOT_PASSED)
    }
  }

  @ReactMethod
  fun validateVPA(
    payuPaymentParams: ReadableMap,
    errorCallback: Callback,
    successCallback: Callback
  ) {

      if(!payuPaymentParams.hasKey(UpiConstant.PAYU_PAYMENT_PARAMS)){
        errorCallback("${UpiConstant.MANDATORY_PRAMS_NOT_PASSED}: ${UpiConstant.PAYU_PAYMENT_PARAMS}")
        return
      }
      val map=payuPaymentParams.getMap(UpiConstant.PAYU_PAYMENT_PARAMS)?.toHashMap()
      Upi.getInstance().validateVPA(reactContext.currentActivity,map, object : PayUUPICallback() {
        override fun onCommandResponse(payuCommandResponse: String?, command: String?) {
          if (payuCommandResponse != null) {
            successCallback(payuCommandResponse)
          } else {
            errorCallback(UpiConstant.ERROR_IN_API_RESPONSE)
          }
        }
        override fun onUpiErrorReceived(code: Int, errorMsg: String?) {
          errorCallback(errorMsg)
        }

      })


  }


}
